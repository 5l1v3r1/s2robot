               ------------------
                Extractor の設定
               ------------------
                Shinsuke Sugaya
               ------------------
                   2009-07-09

ファイルからの文字列抽出方法

    S2Robot では、ファイルから文字列を抽出する方法として、Extractor を提供しています。
    Extractor は ExtractorFactory から MIME タイプをキーとして取得することができます。
    また、dicon ファイルの設定により自由に Extractor を追加、削除することが可能です。

    本機能は、S2Robot のクローリング機能とは独立しているので、ファイルからの文字列抽出をしたい場合に利用可能です。
    Extractor だけ利用したい場合は、s2robot_extractor.dicon を include してください。

* 設定方法

    Extractor をカスタマイズする場合は、s2robot_extractor.dicon を作成してその中で定義します。
    標準の s2robot_extractor.dicon は以下になります。

+--------------------------------------------------+
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE components PUBLIC "-//SEASAR//DTD S2Container 2.4//EN"
	"http://www.seasar.org/dtd/components24.dtd">
<components>
	<component name="msWordExtractor" class="org.seasar.robot.extractor.impl.MsWordExtractor"/>
	<component name="msExcelExtractor" class="org.seasar.robot.extractor.impl.MsExcelExtractor"/>
	<component name="msPowerPointExtractor" class="org.seasar.robot.extractor.impl.MsPowerPointExtractor"/>
	<component name="msPublisherExtractor" class="org.seasar.robot.extractor.impl.MsPublisherExtractor"/>
	<component name="msVisioExtractor" class="org.seasar.robot.extractor.impl.MsVisioExtractor"/>
	<component name="pdfExtractor" class="org.seasar.robot.extractor.impl.PdfExtractor"/>
	<component name="textExtractor" class="org.seasar.robot.extractor.impl.TextExtractor"/>
	<component name="htmlExtractor" class="org.seasar.robot.extractor.impl.HtmlExtractor"/>

	<component name="extractorFactory" class="org.seasar.robot.extractor.ExtractorFactory">
		<initMethod name="addExtractor">
			<arg>"application/msword"</arg>
			<arg>msWordExtractor</arg>
		</initMethod>
		<initMethod name="addExtractor">
			<arg>"application/vnd.ms-excel"</arg>
			<arg>msExcelExtractor</arg>
		</initMethod>
		<initMethod name="addExtractor">
			<arg>"application/vnd.ms-powerpoint"</arg>
			<arg>msPowerPointExtractor</arg>
		</initMethod>
		<initMethod name="addExtractor">
			<arg>"application/vnd.ms-publisher"</arg>
			<arg>msPublisherExtractor</arg>
		</initMethod>
		<initMethod name="addExtractor">
			<arg>"application/vnd.visio"</arg>
			<arg>msVisioExtractor</arg>
		</initMethod>
		<initMethod name="addExtractor">
			<arg>"application/pdf"</arg>
			<arg>pdfExtractor</arg>
		</initMethod>
		<initMethod name="addExtractor">
			<arg>"text/plain"</arg>
			<arg>textExtractor</arg>
		</initMethod>
		<initMethod name="addExtractor">
			<arg>"text/html"</arg>
			<arg>htmlExtractor</arg>
		</initMethod>
		<initMethod name="addExtractor">
			<arg>"application/csv"</arg>
			<arg>textExtractor</arg>
		</initMethod>
		<initMethod name="addExtractor">
			<arg>"application/xml+xhtml"</arg>
			<arg>htmlExtractor</arg>
		</initMethod>
	</component>

</components>

+--------------------------------------------------+

    標準では、MS Office 系ファイルや PDF ファイルからの文字列抽出が可能です。
    ただし、POI や PDFBox の jar ファイルが必要になります。

* 使用方法

    以下のように ExtractorFactory を DI して、利用することができます。

+--------------------------------------------------+
    @Resource
    protected ExtractorFactory extractorFactory;
    :
    InputStream in = ... ex. new FileInputStream("/tmp/text.doc") ...;
    String mimeType = ... ex. "application/msword" ...;
    Extractor extractor = extractorFactory.getExtractor(mimeType);
    String content = extractor.getText(in);
    // content に text.doc 内の文字列だけ入る
    :
+--------------------------------------------------+

